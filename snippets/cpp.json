{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "iostream": {
    "prefix": ["iostream", "#include <iostream>", "include iostream"],
    "body": ["#include <iostream>"],
    "description": ""
  },
  "fstream": {
    "prefix": ["fstream", "#include <fstream>", "include fstream"],
    "body": ["#include <fstream>"],
    "description": ""
  },
  "string": {
    "prefix": ["#include <string>", "include string"],
    "body": ["#include <string>"],
    "description": ""
  },

  "intmain": {
    "prefix": "intmain",
    "body": [
      "int main(int argc, char *argv[])",
      "{",
      "\t$0",
      "\treturn 0;",
      "}",
      ""
    ],
    "description": ""
  },
  "cout": {
    "prefix": ["cout", "print"],
    "body": ["std::cout << \"$0\" << std::endl;"],
    "description": "Print"
  },
  "filein": {
    "prefix": "filein",
    "body": [
      "std::string filename = \"${1:sample.txt}\";",
      "std::ifstream reading_file(filename);",
      "if (!reading_file)",
      "{",
      "\tstd::cerr << \"Failed to open file.\" << std::endl;",
      "\tstd::exit(1);",
      "}",
      "",
      "std::string reading_line_buffer;",
      "while (std::getline(reading_file, reading_line_buffer))",
      "{",
      "\t${0:std::cout << reading_line_buffer << std::endl;}",
      "}",
      "reading_file.close();"
    ],
    "description": "File Read"
  },
  "fileout": {
    "prefix": "fileout",
    "body": [
      "std::string filename = \"${1:sample.txt}\";",
      "std::ofstream writing_file;",
      "writing_file.open(filename, std::ios::out);",
      "${2:std::string writing_text = \"Hello World!\";}",
      "writing_file << ${0:writing_text} << std::endl;",
      "writing_file.close();"
    ],
    "description": "File Write"
  }
}
